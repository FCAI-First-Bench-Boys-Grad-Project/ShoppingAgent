from pydantic import BaseModel, Field
from langchain_core.messages import HumanMessage, SystemMessage, AIMessage
# from src.states.ProductHunterState import ProductHunterState as State
from src.states.MainState import MainState as State
from src.utils.load_system_prompt import load_system_prompt
from src.modules.Link import Link
from src.tools.scraping_tool import query_url_tool
from src.tools.searching_tool import search_tool
from src.modules.llm import model
tools = [query_url_tool, search_tool]


system_prompt = load_system_prompt("manager_agent")


class ProductHunterOutput(BaseModel):
    """Product Hunter agent output schema"""
    message: str = Field(
        description="The message generated by the agent to hand over all the information it gathered for the manager agent. This shall include the product recommendations and their details. and URLs (links)",
    )
    thought: str = Field(
        description="The thought generated by the agent at the current step.",
    )
    isSearch: bool = Field(
        description="Whether the agent is calling the searching tool or not.",
    )
    query: str = Field(
        description="The query for the searching tool. Empty if the agent is not calling the searching tool.",
    )


llm = model.with_structured_output(ProductHunterOutput)

system_prompt = load_system_prompt("product_hunter_agent")


def extract_links(links: list[Link]) -> str:
    res = 'Here are the links and information I found:\n'
    for link in links[0]:  # Assuming links are stored in a list of lists
        res += f"URL: {link.link}\nSummary: {link.description}\n"
    return res if res else "No links found."


scraping_schema = """title: str = Page title
price: float = Product price
description: str = Product description
available: bool = Is available"""

CONTEXT_WINDOW = 10


def product_hunter_agent(state: State):
    if (state.get('links', False) and not state['isScraped']):
        # If links are already provided, return them
        return {"links": [state['links']], "isHuman": False, "next_node": "scraping_tool", "scraping_schema": scraping_schema}

    previous_thoughts = state.get("product_hunter_thoughts", [])
    latest_thoughts = previous_thoughts[-CONTEXT_WINDOW:]

    messages = [SystemMessage(content=system_prompt)]

    # Add previous thoughts as AI messages for context
    for thought in latest_thoughts:
        messages.append(AIMessage(content=thought.content))
    if state.get('isScraped', False):
        # If links are already scraped, return them
        messages.append(HumanMessage(content=extract_links(state['links'])))
        response = llm.invoke(messages)

        return {"messages": [HumanMessage(response.message)], "isHuman": False, "next_node": "manager", "product_hunter_thoughts": [AIMessage(response.thought)], }
    messages.append(HumanMessage(content=state["messages"][-1].content))
    response = llm.invoke(messages)

    return {"messages": [AIMessage(response.query)],
            "product_hunter_thoughts": [AIMessage(response.thought)],
            "isHuman": False, "next_node": "searching_tool",
            "last_agent": "product_hunter_agent"
            }
