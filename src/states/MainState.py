import operator
from typing import Annotated, TypedDict, List
from typing_extensions import Literal
from langchain_core.messages import HumanMessage, SystemMessage
from pydantic import BaseModel, Field
from langgraph.checkpoint.memory import MemorySaver
from langgraph.graph import MessagesState, StateGraph
from src.modules.Link import Link
# from src.modules.Thought import Thought
from langchain_core.messages import BaseMessage


class MainState(TypedDict):
    user_messages: Annotated[
        list[HumanMessage], operator.add
    ]
    messages: Annotated[
        list[BaseMessage], operator.add
    ]
    # Links to the reports generated by workers
    links: list[Link]
    chain_of_thoughts: Annotated[
        list[str], operator.add
    ]
    tool_calls: Annotated[
        list[BaseMessage], operator.add
    ]
    product_hunter_thoughts: Annotated[
        list[BaseMessage], operator.add
    ]
    researcher_thoughts: Annotated[
        list[BaseMessage], operator.add
    ]
    last_agent: Literal['manager', 'product_hunter_agent',
                        'researcher_agent', 'evaluator_agent', 'ask_human']
    next_node: str
    isHuman: bool
    # TODO: not sure about this
    isScraped: bool
    scraping_schema: str
    final_response: str
